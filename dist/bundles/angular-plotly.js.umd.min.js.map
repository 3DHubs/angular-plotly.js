{
  "version": 3,
  "file": "angular-plotly.js.umd.min.js",
  "sources": [
    "ng://angular-plotly.js/out/src/app/plotly/plotly.service.ts",
    "ng://angular-plotly.js/out/src/app/plotly/plot/plot.component.ts",
    "ng://angular-plotly.js/out/src/app/plotly/plotly.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\nimport * as Plotlyjs from 'plotly.js/dist/plotly.js';\n\n\nexport namespace Plotly {\n    export type Data = any;\n    export type Layout = any;\n    export type Config = any;\n\n    export interface Figure {\n        data: Data[];\n        layout: Partial<Layout>;\n        frames: Partial<Config>;\n    }\n\n    // tslint:disable-next-line no-empty-interface\n    export interface PlotlyHTMLElement extends HTMLElement {\n\n    }\n}\n\n\n\n@Injectable()\nexport class PlotlyService {\n    protected plotly = Plotlyjs;\n\n    constructor() {\n        if (typeof this.plotly === 'undefined') {\n            throw new Error(`Peer dependency plotly.js isn't installed`);\n        }\n    }\n\n    public newPlot(div: HTMLDivElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>) {\n        return this.plotly.newPlot(div, data, layout);\n    }\n\n    public plot(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>) {\n        return this.plotly.plot(div, data, layout);\n    }\n\n    public update(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>) {\n        return this.plotly.update(div, data, layout);\n    }\n\n    public resize(div: Plotly.PlotlyHTMLElement): void {\n        return this.plotly.Plots.resize(div);\n    }\n\n}\n",
    "import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChange,\n    SimpleChanges,\n    ViewChild,\n    DoCheck,\n    IterableDiffer,\n    IterableDiffers,\n    KeyValueDiffer,\n    KeyValueDiffers,\n} from '@angular/core';\n\nimport { Plotly, PlotlyService } from '../plotly.service';\nimport { NgClass } from '@angular/common';\n\n// @dynamic\n@Component({\n    selector: 'plotly-plot',\n    template: `<div #plot [attr.id]=\"divId\" [className]=\"getClassName()\" [ngStyle]=\"style\"></div>`,\n    providers: [PlotlyService],\n})\nexport class PlotComponent implements OnInit, OnChanges, OnDestroy, DoCheck {\n    protected defaultClassName = 'js-plotly-plot';\n\n    @ViewChild('plot') plotEl: ElementRef;\n\n    @Input() data?: Plotly.Data[];\n    @Input() layout?: Partial<Plotly.Layout>;\n    @Input() config?: Partial<Plotly.Config>;\n    @Input() style?: { [key: string]: string };\n\n    @Input() divId?: string;\n    @Input() revision: number = 0;\n    @Input() className?: string | string[];\n    @Input() debug: boolean = false;\n    @Input() useResizeHandler: boolean = false;\n\n    @Output() initialized = new EventEmitter<Plotly.Figure>();\n    @Output() update = new EventEmitter<Plotly.Figure>();\n    @Output() purge = new EventEmitter<Plotly.Figure>();\n    @Output() error = new EventEmitter<Error>();\n\n    public plotlyInstance: Plotly.PlotlyHTMLElement;\n    public resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;\n    public layoutDiffer: KeyValueDiffer<string, any>;\n    public dataDiffer: IterableDiffer<Plotly.Data>;\n\n    constructor(\n        public plotly: PlotlyService,\n        public iterableDiffers: IterableDiffers,\n        public keyValueDiffers: KeyValueDiffers,\n    ) { }\n\n    ngOnInit() {\n        this.createPlot().then(() => {\n            const figure = this.createFigure();\n            this.initialized.emit(figure);\n        });\n    }\n\n    ngOnDestroy() {\n        if (typeof this.resizeHandler === 'function') {\n            this.getWindow().removeEventListener('resize', this.resizeHandler as any);\n            this.resizeHandler = undefined;\n        }\n\n        const figure = this.createFigure();\n        this.purge.emit(figure);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let shouldUpdate = false;\n\n        const revision: SimpleChange = changes.revision;\n        if (revision && !revision.isFirstChange()) {\n            shouldUpdate = true;\n        }\n\n        const debug: SimpleChange = changes.debug;\n        if (debug && !debug.isFirstChange()) {\n            shouldUpdate = true;\n        }\n\n        if (shouldUpdate) {\n            this.redraw();\n        }\n\n        this.updateWindowResizeHandler();\n    }\n\n    ngDoCheck() {\n        let shouldUpdate = false;\n\n        if (this.layoutDiffer) {\n            const layoutHasDiff = this.layoutDiffer.diff(this.layout);\n            if (layoutHasDiff) {\n                shouldUpdate = true;\n            }\n        } else if (this.layout) {\n            this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();\n        } else {\n            this.layoutDiffer = undefined;\n        }\n\n        if (this.dataDiffer) {\n            const dataHasDiff = this.dataDiffer.diff(this.data);\n            if (dataHasDiff) {\n                shouldUpdate = true;\n            }\n        } else if (Array.isArray(this.data)) {\n            this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);\n        } else {\n            this.dataDiffer = undefined;\n        }\n\n        if (shouldUpdate && this.plotlyInstance) {\n            this.redraw();\n        }\n    }\n\n    getWindow(): any {\n        return window;\n    }\n\n    getClassName(): string {\n        let classes = [this.defaultClassName];\n\n        if (Array.isArray(this.className)) {\n            classes = classes.concat(this.className);\n        } else if (this.className) {\n            classes.push(this.className);\n        }\n\n        return classes.join(' ');\n    }\n\n    createPlot(): Promise<void> {\n        return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config).then(plotlyInstance => {\n            this.plotlyInstance = plotlyInstance;\n            this.getWindow().gd = this.debug ? plotlyInstance : undefined;\n\n            this.updateWindowResizeHandler();\n        }, err => {\n            console.error('Error while plotting:', err);\n            this.error.emit(err);\n        });\n    }\n\n    createFigure(): Plotly.Figure {\n        const p: any = this.plotlyInstance;\n        const figure: Plotly.Figure = {\n            data: p.data,\n            layout: p.layout,\n            frames: p._transitionData ? p._transitionData._frames : null\n        };\n\n        return figure;\n    }\n\n    redraw() {\n        if (!this.plotlyInstance) {\n            const error = new Error(`Plotly component wasn't initialized`);\n            this.error.emit(error);\n            throw error;\n        }\n\n        return this.createPlot().then(() => {\n            const figure = this.createFigure();\n            this.update.emit(figure);\n        });\n    }\n\n    updateWindowResizeHandler() {\n        if (this.useResizeHandler) {\n            if (this.resizeHandler === undefined) {\n                this.resizeHandler = () => this.plotly.resize(this.plotlyInstance);\n                this.getWindow().addEventListener('resize', this.resizeHandler as any);\n            }\n        } else {\n            if (typeof this.resizeHandler === 'function') {\n                this.getWindow().removeEventListener('resize', this.resizeHandler as any);\n                this.resizeHandler = undefined;\n            }\n        }\n    }\n\n    dataDifferTrackBy(index: number, item: any): any {\n        const obj = Object.assign({}, item, {uid: ''});\n        return JSON.stringify(obj);\n    }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlotComponent } from './plot/plot.component';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [PlotComponent],\n    exports: [PlotComponent],\n})\nexport class PlotlyModule {\n\n}\n"
  ],
  "names": [
    "Plotly",
    "PlotlyService",
    "this",
    "plotly",
    "Plotlyjs",
    "Error",
    "prototype",
    "newPlot",
    "div",
    "data",
    "layout",
    "config",
    "plot",
    "update",
    "resize",
    "Plots",
    "type",
    "Injectable",
    "PlotComponent",
    "iterableDiffers",
    "keyValueDiffers",
    "defaultClassName",
    "revision",
    "debug",
    "useResizeHandler",
    "initialized",
    "EventEmitter",
    "purge",
    "error",
    "ngOnInit",
    "_this",
    "createPlot",
    "then",
    "figure",
    "createFigure",
    "emit",
    "ngOnDestroy",
    "resizeHandler",
    "getWindow",
    "removeEventListener",
    "undefined",
    "ngOnChanges",
    "changes",
    "shouldUpdate",
    "isFirstChange",
    "redraw",
    "updateWindowResizeHandler",
    "ngDoCheck",
    "layoutDiffer",
    "diff",
    "find",
    "create",
    "dataDiffer",
    "Array",
    "isArray",
    "dataDifferTrackBy",
    "plotlyInstance",
    "window",
    "getClassName",
    "classes",
    "className",
    "concat",
    "push",
    "join",
    "plotEl",
    "nativeElement",
    "gd",
    "err",
    "console",
    "p",
    "frames",
    "_transitionData",
    "_frames",
    "addEventListener",
    "index",
    "item",
    "obj",
    "Object",
    "assign",
    "uid",
    "JSON",
    "stringify",
    "Component",
    "args",
    "selector",
    "template",
    "providers",
    "IterableDiffers",
    "KeyValueDiffers",
    "ViewChild",
    "Input",
    "style",
    "divId",
    "Output",
    "PlotlyModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
