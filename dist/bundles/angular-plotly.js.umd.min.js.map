{
  "version": 3,
  "file": "angular-plotly.js.umd.min.js",
  "sources": [
    "ng://angular-plotly.js/out/src/app/plotly/plotly.service.ts",
    "ng://angular-plotly.js/out/src/app/plotly/plot/plot.component.ts",
    "ng://angular-plotly.js/out/src/app/plotly/plotly.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\nimport * as Plotlyjs from 'plotly.js/dist/plotly.js';\n\n\nexport namespace Plotly {\n    export type Data = any;\n    export type Layout = any;\n    export type Config = any;\n\n    export interface Figure {\n        data: Data[];\n        layout: Partial<Layout>;\n        frames: Partial<Config>;\n    }\n\n    export interface PlotlyHTMLElement extends HTMLElement {\n        on(event: string, callback: Function): void;\n        removeListener(event: string, callback: Function): void;\n    }\n}\n\n\n\n@Injectable()\nexport class PlotlyService {\n    protected plotly = Plotlyjs;\n\n    constructor() {\n        if (typeof this.plotly === 'undefined') {\n            throw new Error(`Peer dependency plotly.js isn't installed`);\n        }\n    }\n\n    public newPlot(div: HTMLDivElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>) {\n        return this.plotly.newPlot(div, data, layout);\n    }\n\n    public plot(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>) {\n        return this.plotly.plot(div, data, layout);\n    }\n\n    public update(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>) {\n        return this.plotly.update(div, data, layout);\n    }\n\n    public resize(div: Plotly.PlotlyHTMLElement): void {\n        return this.plotly.Plots.resize(div);\n    }\n\n}\n",
    "import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChange,\n    SimpleChanges,\n    ViewChild,\n    DoCheck,\n    IterableDiffer,\n    IterableDiffers,\n    KeyValueDiffer,\n    KeyValueDiffers,\n} from '@angular/core';\n\nimport { Plotly, PlotlyService } from '../plotly.service';\nimport { NgClass } from '@angular/common';\n\n// @dynamic\n@Component({\n    selector: 'plotly-plot',\n    template: `<div #plot [attr.id]=\"divId\" [className]=\"getClassName()\" [ngStyle]=\"style\"></div>`,\n    providers: [PlotlyService],\n})\nexport class PlotComponent implements OnInit, OnChanges, OnDestroy, DoCheck {\n    protected defaultClassName = 'js-plotly-plot';\n\n    public plotlyInstance: Plotly.PlotlyHTMLElement;\n    public resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;\n    public layoutDiffer: KeyValueDiffer<string, any>;\n    public dataDiffer: IterableDiffer<Plotly.Data>;\n\n    @ViewChild('plot') plotEl: ElementRef;\n\n    @Input() data?: Plotly.Data[];\n    @Input() layout?: Partial<Plotly.Layout>;\n    @Input() config?: Partial<Plotly.Config>;\n    @Input() style?: { [key: string]: string };\n\n    @Input() divId?: string;\n    @Input() revision: number = 0;\n    @Input() className?: string | string[];\n    @Input() debug: boolean = false;\n    @Input() useResizeHandler: boolean = false;\n\n    @Output() initialized = new EventEmitter<Plotly.Figure>();\n    @Output() update = new EventEmitter<Plotly.Figure>();\n    @Output() purge = new EventEmitter<Plotly.Figure>();\n    @Output() error = new EventEmitter<Error>();\n\n    @Output() afterExport = new EventEmitter();\n    @Output() afterPlot = new EventEmitter();\n    @Output() animated = new EventEmitter();\n    @Output() animatingFrame = new EventEmitter();\n    @Output() animationInterrupted = new EventEmitter();\n    @Output() autoSize = new EventEmitter();\n    @Output() beforeExport = new EventEmitter();\n    @Output() buttonClicked = new EventEmitter();\n    @Output() click = new EventEmitter();\n    @Output() clickAnnotation = new EventEmitter();\n    @Output() deselect = new EventEmitter();\n    @Output() doubleClick = new EventEmitter();\n    @Output() framework = new EventEmitter();\n    @Output() hover = new EventEmitter();\n    @Output() legendClick = new EventEmitter();\n    @Output() legendDoubleClick = new EventEmitter();\n    @Output() relayout = new EventEmitter();\n    @Output() restyle = new EventEmitter();\n    @Output() redraw = new EventEmitter();\n    @Output() selected = new EventEmitter();\n    @Output() selecting = new EventEmitter();\n    @Output() sliderChange = new EventEmitter();\n    @Output() sliderEnd = new EventEmitter();\n    @Output() sliderStart = new EventEmitter();\n    @Output() transitioning = new EventEmitter();\n    @Output() transitionInterrupted = new EventEmitter();\n    @Output() unhover = new EventEmitter();\n\n    public eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize',\n        'beforeExport', 'buttonClicked', 'click', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover',\n        'legendClick', 'legendDoubleClick', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange',\n        'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover'];\n\n    constructor(\n        public plotly: PlotlyService,\n        public iterableDiffers: IterableDiffers,\n        public keyValueDiffers: KeyValueDiffers,\n    ) { }\n\n    ngOnInit() {\n        this.createPlot().then(() => {\n            const figure = this.createFigure();\n            this.initialized.emit(figure);\n        });\n    }\n\n    ngOnDestroy() {\n        if (typeof this.resizeHandler === 'function') {\n            this.getWindow().removeEventListener('resize', this.resizeHandler as any);\n            this.resizeHandler = undefined;\n        }\n\n        const figure = this.createFigure();\n        this.purge.emit(figure);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let shouldUpdate = false;\n\n        const revision: SimpleChange = changes.revision;\n        if (revision && !revision.isFirstChange()) {\n            shouldUpdate = true;\n        }\n\n        const debug: SimpleChange = changes.debug;\n        if (debug && !debug.isFirstChange()) {\n            shouldUpdate = true;\n        }\n\n        if (shouldUpdate) {\n            this.updatePlot();\n        }\n\n        this.updateWindowResizeHandler();\n    }\n\n    ngDoCheck() {\n        let shouldUpdate = false;\n\n        if (this.layoutDiffer) {\n            const layoutHasDiff = this.layoutDiffer.diff(this.layout);\n            if (layoutHasDiff) {\n                shouldUpdate = true;\n            }\n        } else if (this.layout) {\n            this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();\n        } else {\n            this.layoutDiffer = undefined;\n        }\n\n        if (this.dataDiffer) {\n            const dataHasDiff = this.dataDiffer.diff(this.data);\n            if (dataHasDiff) {\n                shouldUpdate = true;\n            }\n        } else if (Array.isArray(this.data)) {\n            this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);\n        } else {\n            this.dataDiffer = undefined;\n        }\n\n        if (shouldUpdate && this.plotlyInstance) {\n            this.updatePlot();\n        }\n    }\n\n    getWindow(): any {\n        return window;\n    }\n\n    getClassName(): string {\n        let classes = [this.defaultClassName];\n\n        if (Array.isArray(this.className)) {\n            classes = classes.concat(this.className);\n        } else if (this.className) {\n            classes.push(this.className);\n        }\n\n        return classes.join(' ');\n    }\n\n    createPlot(): Promise<void> {\n        return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config).then(plotlyInstance => {\n            this.plotlyInstance = plotlyInstance;\n            this.getWindow().gd = this.debug ? plotlyInstance : undefined;\n\n            this.eventNames.forEach(name => {\n                const eventName = `plotly_${name.toLowerCase()}`;\n                plotlyInstance.on(eventName, (data: any) => (this[name] as EventEmitter<void>).emit(data));\n            });\n\n            this.updateWindowResizeHandler();\n        }, err => {\n            console.error('Error while plotting:', err);\n            this.error.emit(err);\n        });\n    }\n\n    createFigure(): Plotly.Figure {\n        const p: any = this.plotlyInstance;\n        const figure: Plotly.Figure = {\n            data: p.data,\n            layout: p.layout,\n            frames: p._transitionData ? p._transitionData._frames : null\n        };\n\n        return figure;\n    }\n\n    updatePlot() {\n        if (!this.plotlyInstance) {\n            const error = new Error(`Plotly component wasn't initialized`);\n            this.error.emit(error);\n            throw error;\n        }\n\n        return this.createPlot().then(() => {\n            const figure = this.createFigure();\n            this.update.emit(figure);\n        });\n    }\n\n    updateWindowResizeHandler() {\n        if (this.useResizeHandler) {\n            if (this.resizeHandler === undefined) {\n                this.resizeHandler = () => this.plotly.resize(this.plotlyInstance);\n                this.getWindow().addEventListener('resize', this.resizeHandler as any);\n            }\n        } else {\n            if (typeof this.resizeHandler === 'function') {\n                this.getWindow().removeEventListener('resize', this.resizeHandler as any);\n                this.resizeHandler = undefined;\n            }\n        }\n    }\n\n    dataDifferTrackBy(index: number, item: any): any {\n        const obj = Object.assign({}, item, { uid: '' });\n        return JSON.stringify(obj);\n    }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PlotComponent } from './plot/plot.component';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [PlotComponent],\n    exports: [PlotComponent],\n})\nexport class PlotlyModule {\n\n}\n"
  ],
  "names": [
    "Plotly",
    "PlotlyService",
    "this",
    "plotly",
    "Plotlyjs",
    "Error",
    "prototype",
    "newPlot",
    "div",
    "data",
    "layout",
    "config",
    "plot",
    "update",
    "resize",
    "Plots",
    "type",
    "Injectable",
    "PlotComponent",
    "iterableDiffers",
    "keyValueDiffers",
    "defaultClassName",
    "revision",
    "debug",
    "useResizeHandler",
    "initialized",
    "EventEmitter",
    "purge",
    "error",
    "afterExport",
    "afterPlot",
    "animated",
    "animatingFrame",
    "animationInterrupted",
    "autoSize",
    "beforeExport",
    "buttonClicked",
    "click",
    "clickAnnotation",
    "deselect",
    "doubleClick",
    "framework",
    "hover",
    "legendClick",
    "legendDoubleClick",
    "relayout",
    "restyle",
    "redraw",
    "selected",
    "selecting",
    "sliderChange",
    "sliderEnd",
    "sliderStart",
    "transitioning",
    "transitionInterrupted",
    "unhover",
    "eventNames",
    "ngOnInit",
    "_this",
    "createPlot",
    "then",
    "figure",
    "createFigure",
    "emit",
    "ngOnDestroy",
    "resizeHandler",
    "getWindow",
    "removeEventListener",
    "undefined",
    "ngOnChanges",
    "changes",
    "shouldUpdate",
    "isFirstChange",
    "updatePlot",
    "updateWindowResizeHandler",
    "ngDoCheck",
    "layoutDiffer",
    "diff",
    "find",
    "create",
    "dataDiffer",
    "Array",
    "isArray",
    "dataDifferTrackBy",
    "plotlyInstance",
    "window",
    "getClassName",
    "classes",
    "className",
    "concat",
    "push",
    "join",
    "plotEl",
    "nativeElement",
    "gd",
    "forEach",
    "name",
    "eventName",
    "toLowerCase",
    "on",
    "err",
    "console",
    "p",
    "frames",
    "_transitionData",
    "_frames",
    "addEventListener",
    "index",
    "item",
    "obj",
    "Object",
    "assign",
    "uid",
    "JSON",
    "stringify",
    "Component",
    "args",
    "selector",
    "template",
    "providers",
    "IterableDiffers",
    "KeyValueDiffers",
    "ViewChild",
    "Input",
    "style",
    "divId",
    "Output",
    "PlotlyModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
